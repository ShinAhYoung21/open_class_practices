/*
[함수 예고]
코드를 정리하는 방법 중 하나라고 감 잡기

head에 script태그를 써서 함수를 선언하는 예제를 따라했다.
이런 방식으로 함수를 쓰면, 유지보수 용이성이 극단적으로 향상된다.
    그런데, 사실 꼭 <head>에만 붙여넣어야 하는 것은 아니란다.
*/


/*
[함수]
함수를 이론적으로 정리
나중에 객체 배우고 나서는 함수를 method라고 부르기도 한다.

반복되는 것에 대해 반복문을 쓸 수 없는 경우가 있다.
연속적이지 않게 반복되는 경우.
이럴 때 함수를 사용해서 반복되게 한다.

((기본 문법 내용은 ex9_function.html 파일 참고!))
*/


/*
[함수: 매개변수와 인자]
함수는 입출력으로 이루어져있다.
입력: parameter 매개변수 & argument 인자
출력: return

입력값에 따라 함수가 다른 결과를 출력하게 만들기 위해 사용!

 function sum(left, right){
    document.write(left+right+'<br>');
} //함수 선언 중, sum 옆 ()속에 써있는 값이 매개변수.parameter이다.
sum(2,3); //함수 실행 시 ()속에 있는 값은 인자. argument
sum(4,6);
*/


/*
[함수(리턴)]
*표현식 expression이란 무엇인가?
    1+1은 2에 대한 표현식.
    2-1도 1에 대한 표현식.
    1===1은 true 값에 대한 표현식.

매개변수 값을 return을 통해 출력함으로써 다양한 용도로 함수 활용할 수 있게 된다.
===매우매우 중요한 개념!
*/


/*
[함수의 응용]
(함수로 코드 바꾸기!)
*복습*
    동작하는 내용은 똑같은데 코드를 효율적으로 바꾸는 것 === 리팩토링 refactoring
리팩토링의 중요한 대상, 수단 중 하나가 함수이다.

handler는 관습적으로 쓰인다. (아 그래서 노마드JS에서도 handler를 쓴거구나.)
*/


/*
[객체예고]
Object.
매우 중요하지만 굉장히 어렵다.

프로그래밍의 큰 산 두 가지, 함수와 객체.
객체는 함수라는 기반 위에 존재하는 개념이다.

객체 역시 정리정돈의 수단이다.
함수도 변수도 많아지면, too복잡해진다.

"이런 한계 상황에서 연관된 함수와 연관 변수를 같은 이름으로 그룹화 하여 정리정돈하는 도구."
위의 문장, 이고잉님의 '단 하나의 객체 설명'을 이해하고 고고!
    객체에 대한 다른 내용들은 앞으로 쭉 학습해나가면서 보면 됨!
    일단 하나를 제대로 이해!
    '함수, 연관변수 등등을 담는 폴더 내지는 디렉토리같은 것'이라고 우선 이해하고 고고!
객체 잘 다루는 개발자 되기!!!

set은 설정하다 라는 의미로 프로그래밍에서 많이 쓰인다.

한 줄이라고 해도 의미가 불명확하거나, 시간 지나면 의미 파악이 어려울 경우, 함수에 의해 로직을 부여하는 것이 좋은 전략이다.
    eg) body 일반적 텍스트 색 지정문제

함수명이 중복되면, 뒤에 나오는 놈에 의해 앞에놈이 덮어지면서 앞 함수가 삭제되는 결과가 초래된다!!!
주의!!!
    아 이래서 작명의 고통에 시달린다고 하는구나ㅋㅋㅋㅋㅋㅋ

document도 객체이다!
    document.querySelector()
        여기에서 querySelector는 document에 속해있는 함수.
        객체에 속한 함수는 함수라고 X, method 메소드라고 한다.
*/


/*
[객체 읽기&쓰기]
복습: 정보 양이 많아졌을 때, 서로 연관된 정보 정리정돈하기 위해 사용하는 도구
===배열: 순서에 따라 정보를 정돈한다는 특징이 있다.

순서 없이 정보를 저장할 수 있는 것은 === 객체
꺼내서 써야하는 정보라면, 체계적으로 정리해야 한다. 객체도 '꺼내쓰기 위함'이기 때문에 체계(문법)가 있다.

{}의 의미: 객체 만들 때 사용하는 기호: object literal
*배열은 []
**근데 명칭 몰라도 됨ㅋㅋㅋㅋ

이 사례에서, gamesIKnow 객체에 lol은 game name이라는 딱지 붙여 저장한 것.
const gamesIKnow = {
    "gameName" : "lol",
    "anotherGameName" : "DBH"
};
*객체 내의 딱지를 띄어쓰기 해서 지정하면, 오류가 난다.(문법적 오류) game name 중에서 game만 인식한다. name은 다른 요소로 인식한다(코드 색이 다르게 나옴)
**그러니까, 이름 설정할 때는 객체든, 그 안의 요소든간에 붙여쓰고, 대소문자로 구분하기!
유의!!!

***그런데!!! 띄어쓰기를 '굳이'넣어야겠다면 방법이 있다.
script 태그 안쪽에서, 객체에 요소를 넣을 때,
coworkers["data scientist"] = you;
이렇게, 배열을 쓸 때처럼 [] 대괄호를 쓰고, 또 ""로 감싸서 이름 쓰면 된다.

.의 의미: 객체에 접근하는 operator(연산자) : object access operator
*/


/*
[객체와 반복문]
객체의 데이터를 순회하는(시키는?) 방법.

생성된 객체에 있는 데이터를 모두 가져와야 하는 경우?
반복문을 쓸 수 있다.
*검색어hint: JS object iterate(순회하다, 반복적으로가져오다)

for를 쓰면, 변수(객체)에 있는 key 값들을 가져오는 반복문!
예를 들어,
const gamesIKnow = {
    "gameName" : "lol",
    "anotherGameName" : "DBH"
};
여기서, key값은 gameName, anotherGameName이다.: 우리가 가져오고 싶은 정보에 도달하는 열쇠. 그래서 key.
*배열에서는 key가 아니라 index라는 표현을 쓴다(순서대로 정리되어 있으니까)
*/


/*
[객체프로퍼티와 메소드]
객체에는 함수도 담을 수 있다! === 객체에 소속된 함수를 만들 수 있다.
객체에 소속된 함수 === method
객체에 소속된 변수 === property (내 사례로 gameName, anotherGameName, newbie 등)

gamesIKnow.showAll = function(){]은
function.showAll(){}과 같은 표현이다.

gamesIKnow.showAll = function(){
    for(var key in gamesIKnow) {
        document.write(key+' : '+gamesIKnow[key]+'<br>');
    }
}
gamesIKnow.showAll();

위 예시는 좋은 사례가 아니다. 함수 안에 gamesIKnow라는 이름을 수동 입력해야 하기 때문이다. 객체 이름을 바꾸고 나면, 함수도 찾아서 바꾸지 않는 이상, 무용지물이 된다.
함수가 소속된 객체를 가리키는 것 === this

gamesIKnow.showAll = function(){
    for(var key in this) {
        document.write(key+' : '+this[key]+'<br>');
    }
}
gamesIKnow.showAll();

이렇게 쓰면, 위의 사례와 겉으로는 똑같은 내용을 보여줄 수 있으며, 유지보수하기는 더 편리해진다.
*위 사례를 입력하면, showAll의 함수 내용도 그대로 출력된다는 단점이 있다. 이는 함수 안에 if문을 적절히 사용해서 해결할 수 있는데, 이 수업에서는 다루지 않음.
*/


/*
[객체 활용]
객체는 각 프로퍼티를 구분할 때 ,를 찍는다.
*아름다운베르네 html에 실습

참고로
document.querySelector('body')
여기에서 document는 객체, querySelector는 메소드!


담시간 예고: 정리정돈 도구가 또 많아지면 어떻게 함?
위 물음에 대한 답변같은 학습이 될 것임, 객체보다 더 큰 정리도구!
*/


/*
[파일로 쪼개 정리정돈하기]
연관 코드들을 파일로 묶어 그룹핑하는 것!
js파일을 따로 만들고, 기존에 실습했던 내용 중 script코드가 감싸고있던 부분을 쭉 복붙한다.
각 html script태그의 src속성 값으로 해당 js파일명을 기입한다.
->js파일을 손보면 모든 페이지에 적용된다! 유지보수 아주 편리해진 것!

웹 페이지에서 f12->network 탭을 보면,
이 웹 페이지를 화면에 표시하기 위해 로딩된 파일들을 볼 수 있다.
웹 브라우저가 '나 모르게' 이미지며 js파일 등을 다운로드해서 웹 페이지를 보여준다.

<결론>
연관된 파일을 여러 개로 쪼개서 웹 페이지에 포함시키면, 코드 정리정돈의 효과를 볼 수 있다.

각각의 파일을 다운받기 위해, 웹 서버가 더 '자주(많이?)' 서버에 접속해야 한다는 단점은 있지만, 이렇게 '파일로 쪼개 정리하는 것'이 더 효율적이다.
이유는, 캐시 때문!
캐시 === '저장한다' cache
한번 웹 브라우저에 다운된 파일은 컴퓨터가 저장해둔다. 그러면 다음 접속때는 다운하지 않는다.
이렇게 하면, 서버는 비용절감, 사용자는 네트워크 트래픽 절감 가능! 더 빠르게 웹 페이지를 화면에 표시할 수 있다.
*/


/*
[라이브러리 & 프레임워크]
생산자로서의 소비자! 소프트웨어의 사회성.

오늘날 소프트웨어는 혼자 만들지 않는다.

다른 사람이 만들어둔 부품을 내가 필요한대로 빠르게 조립해서 만드는게
요즘 소프트웨어 만드는 것의 기본!
((내가 진짜 궁금해하던 것이다!!!))

라이브러리&프레임워크 -둘을 똑같이 봐도 되긴 하는데, 뉘앙스가 좀 다름.
라이브러리:
(이고잉님 느낌으로는)무언가가 정리정돈 되어 있는 곳.
뭔가 만들 때, 라이브러리에서 "땡겨와서" 쓴다.
부품이 되는 소프트웨어를 재사용하기 쉽도록 정리되어 있는 소프트웨어.
내가 만들고있는 프로그램에 사용할 부품을 가져오는 느낌.

프레임워크:
반제품같은 것.
뭔가 만들 때, "프레임워크 안에 들어가서" 만든다.
만들려 하는 것(게임, 웹,채팅 등)이 무엇인가에 따라 공통적으로 필요한 것들이나
기획 의도에 따라 달라지는(다른 것이 필요한)경우에
공통적인 부분은 프레임워크가 만들어놓고, 만들 것의 개성/차이점만 살짝살짝 수정할 수 있다.

JS라이브러리 중 가장 유명한 건 jQuery이다. 오래됐고, 안정적이다. ((근데 왜 혹평받지?))
JS지식이 있어야 jQuery를 잘 다룰 수 있다.

jQuery다운로드 페이지에서 cdn검색(content delivery network)
이고잉님 따라 google jQuery cdn카피해서 js파일 연결한 스크립트 앞쪽에 붙여넣었는데... 이걸로 끝이라네? 파일을 새로 받고 뭐하고 할 필요가 없이 이걸로 사용 준비 끝!
*cdn의 쓰임새: 많은 라이브러리들이 cdn을 통해서 자기들의 서버에 파일을 보관해두고,
이용자는 그것을 script src를 통해서 가져가 쓸 수 있도록 한다. 

jQuery를 이용하면, 우리가 반복문을 쓸 필요 없어진다.
jQ가 반복 해준다!
*코드를 드래그해 선택하고 ctrl + / === comment처리됨.
js의 반복문보다 jQ를 (인간이)더 직관적으로 쓸 수 있다. ->그래서 편리하다고 하는 듯.

      $('body').css('backgroundColor', color);
모든 body태그의 backgroundColor를 color값으로 하겠다는 의미.

JS는 가장 빠른 속도로 성장하고 있는 언어 중 하나라서
라이브러리들이 쏟아지듯 많다.

어떤 라이브러리가 새로 생겼고, 어떤 것이 있는지 많이 알 수록 많은 일을 할 수 있는 가능성을 갖게 됨!
*/


/*
[UI vs API]
User Interface
Application Programming Interface

eg)버튼 클릭시 경고창 alert
타이밍과 의도는 개발자가 만들었으나, 경고창의 기능이나 모양 등이 설명되어 있지 않다(코드 자체에).
웹 브라우저 만드는 사람들이 경고창 기능을 미리 만들어두었다가
alert함수를 실행하면 경고창 띄워준다고 JS설명서(JS문법)를 통해 약속한 것이다.
즉, 함수 alert은 경고창 조작하는 장치. -> 개발자가 JS문법의 코드를 이용해 활용하는 것이다.

JS로 API를 응용해서 세상에 없던 응용프로그램을 만들어내는 것이다!

애플리케이션 만들기 위해 프로그래밍 할 때 사용하는 조작장치들을 API라고 한다.
JS뿐 아니라 모든 프로그래밍 언어에 공통적으로 적용되는 것: 모든 애플리케이션들은 API를 프로그래밍적으로(순서대로) 실행하는 것을 통해 만들어진다.

API와 순서는 단어와 문법, 부품과 부품결합방법처럼 뗄레야 뗄 수 없는 것들이다.
*/


/*
[수업을 마치며]
"이제 여러분에게 필요한 것은 공부보다는 실습, 실습보다는 자기 프로젝트"
... 이만큼 하고 나서요? 그게 되나요? 문법 더 공부하려 했는데.

프로젝트를 시작하는 것에는 때가 있다. 바로 지금.
공부 많이 하며 때가 늦어질 수록, 자기가 짠 코드를 긍정하기 어려워지고 머리속이 복잡해지기 때문에 바로 지금 프로젝트를 시작하란다.


프로젝트를 시작하려는 사람에게
1. 모든 개념을 총동원하려 하지 말기
필수불가결한 최소한의 도구로 문제 해결해보려 노력!
최소한의 도구 === 순서에 따라 실행되어야 하는 명령들이 실행되도록 하는 명령.

2. 그것만으로 해결 불가한 순간에, 주의깊게 반복문 조건문 함수 객체 신중하게 도입하기
각 개념간의 관계에 익숙해지다보면, 이 개념들을 유창하게 쓸 수 있게 됨.

3. 또 한계가 찾아오면, 실습 멈추고 공부 다시 시작.


한계 극복을 도와줄 검색어 추천
1. document 객체 자세히 살펴보기:
태그 삭제하고 싶거나 어떤 태그에 자식 태그 추가하고 싶을 때.
필요한 메소드가 document객체 안에 포함되어있을 것이다.

만약, document객체에서도 찾을 수 없으면:
2. DOM으로 수색범위 넓혀보기.
document객체는 DOM의 일부이므로.
*DOM(Document Object Model)

웹페이지 아닌, 웹브라우저 자체를 제어해야 한다면:
3. window객체 조사하기
eg 현재 열려있는 웹페이지의 주소 알아내기, 새 창을 열기, 웹 브라우저의 화면 크기를 JS를 통해 알아내기 등
이 경우, window객체 내 property나 method가 도움이 될 것임.
((아, 노마드코더jS에서 화면 창크기바꾸면 색 바꾸던 게 이거네))

웹페이지 리로드 없이 정보를 변경하고 싶으면:
4. ajax가 필요함.
현대적 웹앱 만드는 데 필수적인 기술.

웹페이지 리로드되어도 현 상태 유지하고 싶을 때:
5. cookie 배우기
사용자를 위한 개인화 서비스 이용 가능

인터넷 끊겨도 동작하는 웹페이지 만들려면: 
6. offline web application 찾아보기

화상통신 웹 앱 만들려면:
7. webRTC

사용자 음성 인식하고 음성으로 정보 전달하려면:
8. speech로 시작하는 API들 살펴보기

3차원 그래픽으로 게임같은 것 만들고 싶으면:
9. webGL
(이고잉님도 안 해보셨다곸ㅋㅋㅋㅋ)

가상현실에 관심 많다면: 
10. webVR



*/